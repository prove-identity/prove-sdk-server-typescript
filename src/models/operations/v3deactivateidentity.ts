/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3DeactivateIdentityRequest = {
  /**
   * A Prove-generated unique ID for a specific identity.
   */
  identityId: string;
  v3IdentityDeactivateRequest?:
    | components.V3IdentityDeactivateRequest
    | undefined;
};

export type V3DeactivateIdentityResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * V3DeactivateIdentityResponse
   */
  v3DeactivateIdentityResponse?:
    | components.V3DeactivateIdentityResponse
    | undefined;
};

/** @internal */
export const V3DeactivateIdentityRequest$inboundSchema: z.ZodType<
  V3DeactivateIdentityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  identityId: z.string(),
  V3IdentityDeactivateRequest: components
    .V3IdentityDeactivateRequest$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "V3IdentityDeactivateRequest": "v3IdentityDeactivateRequest",
  });
});

/** @internal */
export type V3DeactivateIdentityRequest$Outbound = {
  identityId: string;
  V3IdentityDeactivateRequest?:
    | components.V3IdentityDeactivateRequest$Outbound
    | undefined;
};

/** @internal */
export const V3DeactivateIdentityRequest$outboundSchema: z.ZodType<
  V3DeactivateIdentityRequest$Outbound,
  z.ZodTypeDef,
  V3DeactivateIdentityRequest
> = z.object({
  identityId: z.string(),
  v3IdentityDeactivateRequest: components
    .V3IdentityDeactivateRequest$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    v3IdentityDeactivateRequest: "V3IdentityDeactivateRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3DeactivateIdentityRequest$ {
  /** @deprecated use `V3DeactivateIdentityRequest$inboundSchema` instead. */
  export const inboundSchema = V3DeactivateIdentityRequest$inboundSchema;
  /** @deprecated use `V3DeactivateIdentityRequest$outboundSchema` instead. */
  export const outboundSchema = V3DeactivateIdentityRequest$outboundSchema;
  /** @deprecated use `V3DeactivateIdentityRequest$Outbound` instead. */
  export type Outbound = V3DeactivateIdentityRequest$Outbound;
}

export function v3DeactivateIdentityRequestToJSON(
  v3DeactivateIdentityRequest: V3DeactivateIdentityRequest,
): string {
  return JSON.stringify(
    V3DeactivateIdentityRequest$outboundSchema.parse(
      v3DeactivateIdentityRequest,
    ),
  );
}

export function v3DeactivateIdentityRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3DeactivateIdentityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3DeactivateIdentityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3DeactivateIdentityRequest' from JSON`,
  );
}

/** @internal */
export const V3DeactivateIdentityResponse$inboundSchema: z.ZodType<
  V3DeactivateIdentityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V3DeactivateIdentityResponse: components
    .V3DeactivateIdentityResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V3DeactivateIdentityResponse": "v3DeactivateIdentityResponse",
  });
});

/** @internal */
export type V3DeactivateIdentityResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V3DeactivateIdentityResponse?:
    | components.V3DeactivateIdentityResponse$Outbound
    | undefined;
};

/** @internal */
export const V3DeactivateIdentityResponse$outboundSchema: z.ZodType<
  V3DeactivateIdentityResponse$Outbound,
  z.ZodTypeDef,
  V3DeactivateIdentityResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v3DeactivateIdentityResponse: components
    .V3DeactivateIdentityResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v3DeactivateIdentityResponse: "V3DeactivateIdentityResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3DeactivateIdentityResponse$ {
  /** @deprecated use `V3DeactivateIdentityResponse$inboundSchema` instead. */
  export const inboundSchema = V3DeactivateIdentityResponse$inboundSchema;
  /** @deprecated use `V3DeactivateIdentityResponse$outboundSchema` instead. */
  export const outboundSchema = V3DeactivateIdentityResponse$outboundSchema;
  /** @deprecated use `V3DeactivateIdentityResponse$Outbound` instead. */
  export type Outbound = V3DeactivateIdentityResponse$Outbound;
}

export function v3DeactivateIdentityResponseToJSON(
  v3DeactivateIdentityResponse: V3DeactivateIdentityResponse,
): string {
  return JSON.stringify(
    V3DeactivateIdentityResponse$outboundSchema.parse(
      v3DeactivateIdentityResponse,
    ),
  );
}

export function v3DeactivateIdentityResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3DeactivateIdentityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3DeactivateIdentityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3DeactivateIdentityResponse' from JSON`,
  );
}
