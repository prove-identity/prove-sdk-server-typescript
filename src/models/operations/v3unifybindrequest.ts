/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3UnifyBindRequestResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Successful Request.
   */
  v3UnifyBindResponse?: components.V3UnifyBindResponse | undefined;
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const V3UnifyBindRequestResponse$inboundSchema: z.ZodType<
  V3UnifyBindRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V3UnifyBindResponse: components.V3UnifyBindResponse$inboundSchema.optional(),
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V3UnifyBindResponse": "v3UnifyBindResponse",
    "Headers": "headers",
  });
});

/** @internal */
export type V3UnifyBindRequestResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V3UnifyBindResponse?: components.V3UnifyBindResponse$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const V3UnifyBindRequestResponse$outboundSchema: z.ZodType<
  V3UnifyBindRequestResponse$Outbound,
  z.ZodTypeDef,
  V3UnifyBindRequestResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v3UnifyBindResponse: components.V3UnifyBindResponse$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v3UnifyBindResponse: "V3UnifyBindResponse",
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3UnifyBindRequestResponse$ {
  /** @deprecated use `V3UnifyBindRequestResponse$inboundSchema` instead. */
  export const inboundSchema = V3UnifyBindRequestResponse$inboundSchema;
  /** @deprecated use `V3UnifyBindRequestResponse$outboundSchema` instead. */
  export const outboundSchema = V3UnifyBindRequestResponse$outboundSchema;
  /** @deprecated use `V3UnifyBindRequestResponse$Outbound` instead. */
  export type Outbound = V3UnifyBindRequestResponse$Outbound;
}

export function v3UnifyBindRequestResponseToJSON(
  v3UnifyBindRequestResponse: V3UnifyBindRequestResponse,
): string {
  return JSON.stringify(
    V3UnifyBindRequestResponse$outboundSchema.parse(v3UnifyBindRequestResponse),
  );
}

export function v3UnifyBindRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3UnifyBindRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3UnifyBindRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3UnifyBindRequestResponse' from JSON`,
  );
}
