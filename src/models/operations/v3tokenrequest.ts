/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3TokenRequestResponse = {
  httpMeta: components.HTTPMetadata;
  /**
   * Successful request.
   */
  v3TokenResponse?: components.V3TokenResponse | undefined;
};

/** @internal */
export const V3TokenRequestResponse$inboundSchema: z.ZodType<
  V3TokenRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V3TokenResponse: components.V3TokenResponse$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V3TokenResponse": "v3TokenResponse",
  });
});

/** @internal */
export type V3TokenRequestResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V3TokenResponse?: components.V3TokenResponse$Outbound | undefined;
};

/** @internal */
export const V3TokenRequestResponse$outboundSchema: z.ZodType<
  V3TokenRequestResponse$Outbound,
  z.ZodTypeDef,
  V3TokenRequestResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v3TokenResponse: components.V3TokenResponse$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v3TokenResponse: "V3TokenResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3TokenRequestResponse$ {
  /** @deprecated use `V3TokenRequestResponse$inboundSchema` instead. */
  export const inboundSchema = V3TokenRequestResponse$inboundSchema;
  /** @deprecated use `V3TokenRequestResponse$outboundSchema` instead. */
  export const outboundSchema = V3TokenRequestResponse$outboundSchema;
  /** @deprecated use `V3TokenRequestResponse$Outbound` instead. */
  export type Outbound = V3TokenRequestResponse$Outbound;
}

export function v3TokenRequestResponseToJSON(
  v3TokenRequestResponse: V3TokenRequestResponse,
): string {
  return JSON.stringify(
    V3TokenRequestResponse$outboundSchema.parse(v3TokenRequestResponse),
  );
}

export function v3TokenRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3TokenRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3TokenRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3TokenRequestResponse' from JSON`,
  );
}
