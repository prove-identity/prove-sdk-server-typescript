/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3DomainIDRequestResponse = {
  httpMeta: components.HTTPMetadata;
  v3DomainIDResponse?: components.V3DomainIDResponse | undefined;
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const V3DomainIDRequestResponse$inboundSchema: z.ZodType<
  V3DomainIDRequestResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: components.HTTPMetadata$inboundSchema,
  V3DomainIDResponse: components.V3DomainIDResponse$inboundSchema.optional(),
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "V3DomainIDResponse": "v3DomainIDResponse",
    "Headers": "headers",
  });
});

/** @internal */
export type V3DomainIDRequestResponse$Outbound = {
  HttpMeta: components.HTTPMetadata$Outbound;
  V3DomainIDResponse?: components.V3DomainIDResponse$Outbound | undefined;
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const V3DomainIDRequestResponse$outboundSchema: z.ZodType<
  V3DomainIDRequestResponse$Outbound,
  z.ZodTypeDef,
  V3DomainIDRequestResponse
> = z.object({
  httpMeta: components.HTTPMetadata$outboundSchema,
  v3DomainIDResponse: components.V3DomainIDResponse$outboundSchema.optional(),
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    v3DomainIDResponse: "V3DomainIDResponse",
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3DomainIDRequestResponse$ {
  /** @deprecated use `V3DomainIDRequestResponse$inboundSchema` instead. */
  export const inboundSchema = V3DomainIDRequestResponse$inboundSchema;
  /** @deprecated use `V3DomainIDRequestResponse$outboundSchema` instead. */
  export const outboundSchema = V3DomainIDRequestResponse$outboundSchema;
  /** @deprecated use `V3DomainIDRequestResponse$Outbound` instead. */
  export type Outbound = V3DomainIDRequestResponse$Outbound;
}

export function v3DomainIDRequestResponseToJSON(
  v3DomainIDRequestResponse: V3DomainIDRequestResponse,
): string {
  return JSON.stringify(
    V3DomainIDRequestResponse$outboundSchema.parse(v3DomainIDRequestResponse),
  );
}

export function v3DomainIDRequestResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3DomainIDRequestResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3DomainIDRequestResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3DomainIDRequestResponse' from JSON`,
  );
}
