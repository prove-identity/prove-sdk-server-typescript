/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Bad Request. The server cannot process the request due to a client error.
 */
export type ErrorTData = {
    /**
     * Code is an internal error code that describes the problem category of the request.
     */
    code?: number | undefined;
    /**
     * Message is an error message describing the problem with the request.
     */
    message: string;
};

/**
 * Bad Request. The server cannot process the request due to a client error.
 */
export class ErrorT extends Error {
    /**
     * Code is an internal error code that describes the problem category of the request.
     */
    code?: number | undefined;

    /** The original data that was passed to this error instance. */
    data$: ErrorTData;

    constructor(err: ErrorTData) {
        super("");
        this.data$ = err;

        if (err.code != null) {
            this.code = err.code;
        }

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ErrorT";
    }
}

/** @internal */
export namespace ErrorT$ {
    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
        .object({
            code: z.number().int().optional(),
            message: z.string(),
        })
        .transform((v) => {
            return new ErrorT({
                ...(v.code === undefined ? null : { code: v.code }),
                message: v.message,
            });
        });
}
