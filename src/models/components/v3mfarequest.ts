/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request body for the V3 MFA API
 */
export type V3MFARequest = {
  /**
   * Client Customer ID is a client-generated unique ID for a specific customer.
   */
  clientCustomerId?: string | undefined;
  /**
   * Client Request ID is a client-generated unique ID for a specific session.
   */
  clientRequestId?: string | undefined;
  /**
   * Email is the email address of the customer.
   */
  emailAddress?: string | undefined;
  /**
   * Final target URL is only required when possessionType=desktop. The final target
   *
   * @remarks
   * URL is where the end user will be redirected at the end of Instant Link flow.
   * Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
   */
  finalTargetUrl?: string | undefined;
  /**
   * IP Address of the customer.
   */
  ipAddress?: string | undefined;
  /**
   * Phone number is the number of the mobile phone. Optional in US, required in EU.
   *
   * @remarks
   * Not allowed when possessionType is 'none'. Acceptable characters are:
   * alphanumeric with symbols '+'.
   */
  phoneNumber?: string | undefined;
  /**
   * Possession type is based on the method used - either 'desktop' if using desktop,
   *
   * @remarks
   * 'mobile' for iOS/Android native apps and mobile web, or 'none' if no possession
   * check is required. Acceptable options are: 'desktop', 'mobile', and 'none'.
   */
  possessionType: string;
  /**
   * SMSMessage is an optional field to customize the message body sent in the
   *
   * @remarks
   * Instant Link (possessionType=desktop) or OTP (on mobile) SMS message.
   */
  smsMessage?: string | undefined;
};

/** @internal */
export const V3MFARequest$inboundSchema: z.ZodType<
  V3MFARequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientCustomerId: z.string().optional(),
  clientRequestId: z.string().optional(),
  emailAddress: z.string().optional(),
  finalTargetUrl: z.string().optional(),
  ipAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  possessionType: z.string(),
  smsMessage: z.string().optional(),
});

/** @internal */
export type V3MFARequest$Outbound = {
  clientCustomerId?: string | undefined;
  clientRequestId?: string | undefined;
  emailAddress?: string | undefined;
  finalTargetUrl?: string | undefined;
  ipAddress?: string | undefined;
  phoneNumber?: string | undefined;
  possessionType: string;
  smsMessage?: string | undefined;
};

/** @internal */
export const V3MFARequest$outboundSchema: z.ZodType<
  V3MFARequest$Outbound,
  z.ZodTypeDef,
  V3MFARequest
> = z.object({
  clientCustomerId: z.string().optional(),
  clientRequestId: z.string().optional(),
  emailAddress: z.string().optional(),
  finalTargetUrl: z.string().optional(),
  ipAddress: z.string().optional(),
  phoneNumber: z.string().optional(),
  possessionType: z.string(),
  smsMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3MFARequest$ {
  /** @deprecated use `V3MFARequest$inboundSchema` instead. */
  export const inboundSchema = V3MFARequest$inboundSchema;
  /** @deprecated use `V3MFARequest$outboundSchema` instead. */
  export const outboundSchema = V3MFARequest$outboundSchema;
  /** @deprecated use `V3MFARequest$Outbound` instead. */
  export type Outbound = V3MFARequest$Outbound;
}

export function v3MFARequestToJSON(v3MFARequest: V3MFARequest): string {
  return JSON.stringify(V3MFARequest$outboundSchema.parse(v3MFARequest));
}

export function v3MFARequestFromJSON(
  jsonString: string,
): SafeParseResult<V3MFARequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3MFARequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3MFARequest' from JSON`,
  );
}
