/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { FieldTypeResponse, FieldTypeResponse$ } from "./fieldtyperesponse.js";
import * as z from "zod";

export type AmlTypeListResponse = {
    amlType?: string | undefined;
    fields?: Array<FieldTypeResponse> | undefined;
    listHits?: number | undefined;
};

/** @internal */
export namespace AmlTypeListResponse$ {
    export const inboundSchema: z.ZodType<AmlTypeListResponse, z.ZodTypeDef, unknown> = z
        .object({
            AmlType: z.string().optional(),
            Fields: z.array(FieldTypeResponse$.inboundSchema).optional(),
            ListHits: z.number().int().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                AmlType: "amlType",
                Fields: "fields",
                ListHits: "listHits",
            });
        });

    export type Outbound = {
        AmlType?: string | undefined;
        Fields?: Array<FieldTypeResponse$.Outbound> | undefined;
        ListHits?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AmlTypeListResponse> = z
        .object({
            amlType: z.string().optional(),
            fields: z.array(FieldTypeResponse$.outboundSchema).optional(),
            listHits: z.number().int().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                amlType: "AmlType",
                fields: "Fields",
                listHits: "ListHits",
            });
        });
}
