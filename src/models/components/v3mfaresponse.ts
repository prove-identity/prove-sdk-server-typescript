/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response body for the V3 MFA API
 */
export type V3MFAResponse = {
  /**
   * AuthToken is a one-time use JWT for client side possession SDK
   *
   * @remarks
   * authentication/authorization.
   */
  authToken?: string | undefined;
  /**
   * Correlation ID is the unique ID that Prove generates for the flow.
   */
  correlationId: string;
  success: string;
};

/** @internal */
export const V3MFAResponse$inboundSchema: z.ZodType<
  V3MFAResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  authToken: z.string().optional(),
  correlationId: z.string(),
  success: z.string(),
});

/** @internal */
export type V3MFAResponse$Outbound = {
  authToken?: string | undefined;
  correlationId: string;
  success: string;
};

/** @internal */
export const V3MFAResponse$outboundSchema: z.ZodType<
  V3MFAResponse$Outbound,
  z.ZodTypeDef,
  V3MFAResponse
> = z.object({
  authToken: z.string().optional(),
  correlationId: z.string(),
  success: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3MFAResponse$ {
  /** @deprecated use `V3MFAResponse$inboundSchema` instead. */
  export const inboundSchema = V3MFAResponse$inboundSchema;
  /** @deprecated use `V3MFAResponse$outboundSchema` instead. */
  export const outboundSchema = V3MFAResponse$outboundSchema;
  /** @deprecated use `V3MFAResponse$Outbound` instead. */
  export type Outbound = V3MFAResponse$Outbound;
}

export function v3MFAResponseToJSON(v3MFAResponse: V3MFAResponse): string {
  return JSON.stringify(V3MFAResponse$outboundSchema.parse(v3MFAResponse));
}

export function v3MFAResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3MFAResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3MFAResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3MFAResponse' from JSON`,
  );
}
