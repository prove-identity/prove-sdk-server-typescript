/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3VerifyStatusRequest = {
  /**
   * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
   */
  clientRequestId?: string | undefined;
  /**
   * The unique ID that Prove generates for the flow. It is returned from the v3/verify endpoint and cannot be reused outside of a single flow.
   */
  correlationId?: string | undefined;
};

/** @internal */
export const V3VerifyStatusRequest$inboundSchema: z.ZodType<
  V3VerifyStatusRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientRequestId: z.string().optional(),
  correlationId: z.string().optional(),
});

/** @internal */
export type V3VerifyStatusRequest$Outbound = {
  clientRequestId?: string | undefined;
  correlationId?: string | undefined;
};

/** @internal */
export const V3VerifyStatusRequest$outboundSchema: z.ZodType<
  V3VerifyStatusRequest$Outbound,
  z.ZodTypeDef,
  V3VerifyStatusRequest
> = z.object({
  clientRequestId: z.string().optional(),
  correlationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3VerifyStatusRequest$ {
  /** @deprecated use `V3VerifyStatusRequest$inboundSchema` instead. */
  export const inboundSchema = V3VerifyStatusRequest$inboundSchema;
  /** @deprecated use `V3VerifyStatusRequest$outboundSchema` instead. */
  export const outboundSchema = V3VerifyStatusRequest$outboundSchema;
  /** @deprecated use `V3VerifyStatusRequest$Outbound` instead. */
  export type Outbound = V3VerifyStatusRequest$Outbound;
}

export function v3VerifyStatusRequestToJSON(
  v3VerifyStatusRequest: V3VerifyStatusRequest,
): string {
  return JSON.stringify(
    V3VerifyStatusRequest$outboundSchema.parse(v3VerifyStatusRequest),
  );
}

export function v3VerifyStatusRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3VerifyStatusRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3VerifyStatusRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3VerifyStatusRequest' from JSON`,
  );
}
