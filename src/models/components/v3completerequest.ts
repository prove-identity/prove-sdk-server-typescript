/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    V3CompleteIndividualRequest,
    V3CompleteIndividualRequest$,
} from "./v3completeindividualrequest.js";
import * as z from "zod";

export type V3CompleteRequest = {
    /**
     * Correlation ID is the unique ID that Prove generates for the flow. It is returned from the Start endpoint and cannot be reused outside of a single flow.
     */
    correlationId: string;
    individual: V3CompleteIndividualRequest;
};

/** @internal */
export namespace V3CompleteRequest$ {
    export const inboundSchema: z.ZodType<V3CompleteRequest, z.ZodTypeDef, unknown> = z.object({
        correlationId: z.string(),
        individual: V3CompleteIndividualRequest$.inboundSchema,
    });

    export type Outbound = {
        correlationId: string;
        individual: V3CompleteIndividualRequest$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V3CompleteRequest> = z.object({
        correlationId: z.string(),
        individual: V3CompleteIndividualRequest$.outboundSchema,
    });
}
