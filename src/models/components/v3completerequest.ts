/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  V3CompleteIndividualRequest,
  V3CompleteIndividualRequest$inboundSchema,
  V3CompleteIndividualRequest$Outbound,
  V3CompleteIndividualRequest$outboundSchema,
} from "./v3completeindividualrequest.js";

export type V3CompleteRequest = {
  /**
   * Correlation ID is the unique ID that Prove generates for the flow. It is returned from the Start endpoint and cannot be reused outside of a single flow.
   */
  correlationId: string;
  individual: V3CompleteIndividualRequest;
};

/** @internal */
export const V3CompleteRequest$inboundSchema: z.ZodType<
  V3CompleteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  correlationId: z.string(),
  individual: V3CompleteIndividualRequest$inboundSchema,
});

/** @internal */
export type V3CompleteRequest$Outbound = {
  correlationId: string;
  individual: V3CompleteIndividualRequest$Outbound;
};

/** @internal */
export const V3CompleteRequest$outboundSchema: z.ZodType<
  V3CompleteRequest$Outbound,
  z.ZodTypeDef,
  V3CompleteRequest
> = z.object({
  correlationId: z.string(),
  individual: V3CompleteIndividualRequest$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CompleteRequest$ {
  /** @deprecated use `V3CompleteRequest$inboundSchema` instead. */
  export const inboundSchema = V3CompleteRequest$inboundSchema;
  /** @deprecated use `V3CompleteRequest$outboundSchema` instead. */
  export const outboundSchema = V3CompleteRequest$outboundSchema;
  /** @deprecated use `V3CompleteRequest$Outbound` instead. */
  export type Outbound = V3CompleteRequest$Outbound;
}
