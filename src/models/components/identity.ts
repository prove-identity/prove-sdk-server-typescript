/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Identity = {
  /**
   * Proveâ€™s tiered confidence metric, ranging from -1 to 3, that dynamically adapts to user behavior and various authentication keys. It allows for adaptive security policies, meaning you can require different levels of verification for different types of transactions.
   */
  assuranceLevel: string;
  clientCustomerId: string;
  /**
   * (required IF verificationType=VerifiedUser)
   */
  clientHumanId?: string | undefined;
  /**
   * The first name of the individual. (required IF verificationType=VerifiedUser)
   */
  firstName: string;
  /**
   * The last name of the individual. (required IF verificationType=VerifiedUser)
   */
  lastName: string;
  /**
   * (required IF verificationType=VerifiedUser)
   */
  proveId?: string | undefined;
  /**
   * (required IF verificationType=VerifiedUser)
   */
  provePhoneAlias?: string | undefined;
  /**
   * Codes explaining the verification outcome
   */
  reasons: Array<string>;
};

/** @internal */
export const Identity$inboundSchema: z.ZodType<
  Identity,
  z.ZodTypeDef,
  unknown
> = z.object({
  assuranceLevel: z.string(),
  clientCustomerId: z.string(),
  clientHumanId: z.string().optional(),
  firstName: z.string(),
  lastName: z.string(),
  proveId: z.string().optional(),
  provePhoneAlias: z.string().optional(),
  reasons: z.array(z.string()),
});

/** @internal */
export type Identity$Outbound = {
  assuranceLevel: string;
  clientCustomerId: string;
  clientHumanId?: string | undefined;
  firstName: string;
  lastName: string;
  proveId?: string | undefined;
  provePhoneAlias?: string | undefined;
  reasons: Array<string>;
};

/** @internal */
export const Identity$outboundSchema: z.ZodType<
  Identity$Outbound,
  z.ZodTypeDef,
  Identity
> = z.object({
  assuranceLevel: z.string(),
  clientCustomerId: z.string(),
  clientHumanId: z.string().optional(),
  firstName: z.string(),
  lastName: z.string(),
  proveId: z.string().optional(),
  provePhoneAlias: z.string().optional(),
  reasons: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Identity$ {
  /** @deprecated use `Identity$inboundSchema` instead. */
  export const inboundSchema = Identity$inboundSchema;
  /** @deprecated use `Identity$outboundSchema` instead. */
  export const outboundSchema = Identity$outboundSchema;
  /** @deprecated use `Identity$Outbound` instead. */
  export type Outbound = Identity$Outbound;
}

export function identityToJSON(identity: Identity): string {
  return JSON.stringify(Identity$outboundSchema.parse(identity));
}

export function identityFromJSON(
  jsonString: string,
): SafeParseResult<Identity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Identity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Identity' from JSON`,
  );
}
