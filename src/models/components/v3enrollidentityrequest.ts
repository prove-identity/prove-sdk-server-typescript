/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request body for the V3 Enroll Identity API.
 */
export type V3EnrollIdentityRequest = {
  /**
   * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include personally identifiable information (PII) in this field.
   */
  clientCustomerId?: string | undefined;
  /**
   * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
   */
  clientRequestId?: string | undefined;
  /**
   * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
   */
  deviceId?: string | undefined;
  /**
   * The number of the consumer being enrolled. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
   */
  phoneNumber: string;
};

/** @internal */
export const V3EnrollIdentityRequest$inboundSchema: z.ZodType<
  V3EnrollIdentityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientCustomerId: z.string().optional(),
  clientRequestId: z.string().optional(),
  deviceId: z.string().optional(),
  phoneNumber: z.string(),
});

/** @internal */
export type V3EnrollIdentityRequest$Outbound = {
  clientCustomerId?: string | undefined;
  clientRequestId?: string | undefined;
  deviceId?: string | undefined;
  phoneNumber: string;
};

/** @internal */
export const V3EnrollIdentityRequest$outboundSchema: z.ZodType<
  V3EnrollIdentityRequest$Outbound,
  z.ZodTypeDef,
  V3EnrollIdentityRequest
> = z.object({
  clientCustomerId: z.string().optional(),
  clientRequestId: z.string().optional(),
  deviceId: z.string().optional(),
  phoneNumber: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3EnrollIdentityRequest$ {
  /** @deprecated use `V3EnrollIdentityRequest$inboundSchema` instead. */
  export const inboundSchema = V3EnrollIdentityRequest$inboundSchema;
  /** @deprecated use `V3EnrollIdentityRequest$outboundSchema` instead. */
  export const outboundSchema = V3EnrollIdentityRequest$outboundSchema;
  /** @deprecated use `V3EnrollIdentityRequest$Outbound` instead. */
  export type Outbound = V3EnrollIdentityRequest$Outbound;
}

export function v3EnrollIdentityRequestToJSON(
  v3EnrollIdentityRequest: V3EnrollIdentityRequest,
): string {
  return JSON.stringify(
    V3EnrollIdentityRequest$outboundSchema.parse(v3EnrollIdentityRequest),
  );
}

export function v3EnrollIdentityRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3EnrollIdentityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3EnrollIdentityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3EnrollIdentityRequest' from JSON`,
  );
}
