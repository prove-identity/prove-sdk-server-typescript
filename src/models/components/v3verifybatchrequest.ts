/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  VerifyItem,
  VerifyItem$inboundSchema,
  VerifyItem$Outbound,
  VerifyItem$outboundSchema,
} from "./verifyitem.js";

export type V3VerifyBatchRequest = {
  clientRequestId?: string | undefined;
  /**
   * Batch of verify requests to process. The array length cannot exceed 1000 items.
   */
  items: Array<VerifyItem>;
};

/** @internal */
export const V3VerifyBatchRequest$inboundSchema: z.ZodType<
  V3VerifyBatchRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientRequestId: z.string().optional(),
  items: z.array(VerifyItem$inboundSchema),
});

/** @internal */
export type V3VerifyBatchRequest$Outbound = {
  clientRequestId?: string | undefined;
  items: Array<VerifyItem$Outbound>;
};

/** @internal */
export const V3VerifyBatchRequest$outboundSchema: z.ZodType<
  V3VerifyBatchRequest$Outbound,
  z.ZodTypeDef,
  V3VerifyBatchRequest
> = z.object({
  clientRequestId: z.string().optional(),
  items: z.array(VerifyItem$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3VerifyBatchRequest$ {
  /** @deprecated use `V3VerifyBatchRequest$inboundSchema` instead. */
  export const inboundSchema = V3VerifyBatchRequest$inboundSchema;
  /** @deprecated use `V3VerifyBatchRequest$outboundSchema` instead. */
  export const outboundSchema = V3VerifyBatchRequest$outboundSchema;
  /** @deprecated use `V3VerifyBatchRequest$Outbound` instead. */
  export type Outbound = V3VerifyBatchRequest$Outbound;
}

export function v3VerifyBatchRequestToJSON(
  v3VerifyBatchRequest: V3VerifyBatchRequest,
): string {
  return JSON.stringify(
    V3VerifyBatchRequest$outboundSchema.parse(v3VerifyBatchRequest),
  );
}

export function v3VerifyBatchRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3VerifyBatchRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3VerifyBatchRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3VerifyBatchRequest' from JSON`,
  );
}
