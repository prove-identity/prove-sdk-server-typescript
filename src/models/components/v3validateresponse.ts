/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V3ValidateResponse = {
    /**
     * Challenge missing returns true if a DOB or SSN needs to be passed in on the next step.
     */
    challengeMissing: boolean;
    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    next: { [k: string]: string };
    /**
     * Success returns true if the phone number was validated.
     */
    success: boolean;
};

/** @internal */
export namespace V3ValidateResponse$ {
    export const inboundSchema: z.ZodType<V3ValidateResponse, z.ZodTypeDef, unknown> = z
        .object({
            challengeMissing: z.boolean(),
            next: z.record(z.string()),
            success: z.boolean(),
        })
        .transform((v) => {
            return {
                challengeMissing: v.challengeMissing,
                next: v.next,
                success: v.success,
            };
        });

    export type Outbound = {
        challengeMissing: boolean;
        next: { [k: string]: string };
        success: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V3ValidateResponse> = z
        .object({
            challengeMissing: z.boolean(),
            next: z.record(z.string()),
            success: z.boolean(),
        })
        .transform((v) => {
            return {
                challengeMissing: v.challengeMissing,
                next: v.next,
                success: v.success,
            };
        });
}
