/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IDVDataInternal,
  IDVDataInternal$inboundSchema,
  IDVDataInternal$Outbound,
  IDVDataInternal$outboundSchema,
} from "./idvdatainternal.js";
import {
  KYCInternal,
  KYCInternal$inboundSchema,
  KYCInternal$Outbound,
  KYCInternal$outboundSchema,
} from "./kycinternal.js";

export type V3CompleteResponseEvaluation = {};

export type V3CompleteResponse = {
  /**
   * The evaluation result for the policy
   */
  evaluation?: { [k: string]: V3CompleteResponseEvaluation } | undefined;
  idv?: IDVDataInternal | undefined;
  kyc?: KYCInternal | undefined;
  /**
   * The next set of allowed calls in the same flow.
   */
  next: { [k: string]: string };
  /**
   * True if the individual was verified successfully.
   */
  success: boolean;
};

/** @internal */
export const V3CompleteResponseEvaluation$inboundSchema: z.ZodType<
  V3CompleteResponseEvaluation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type V3CompleteResponseEvaluation$Outbound = {};

/** @internal */
export const V3CompleteResponseEvaluation$outboundSchema: z.ZodType<
  V3CompleteResponseEvaluation$Outbound,
  z.ZodTypeDef,
  V3CompleteResponseEvaluation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CompleteResponseEvaluation$ {
  /** @deprecated use `V3CompleteResponseEvaluation$inboundSchema` instead. */
  export const inboundSchema = V3CompleteResponseEvaluation$inboundSchema;
  /** @deprecated use `V3CompleteResponseEvaluation$outboundSchema` instead. */
  export const outboundSchema = V3CompleteResponseEvaluation$outboundSchema;
  /** @deprecated use `V3CompleteResponseEvaluation$Outbound` instead. */
  export type Outbound = V3CompleteResponseEvaluation$Outbound;
}

export function v3CompleteResponseEvaluationToJSON(
  v3CompleteResponseEvaluation: V3CompleteResponseEvaluation,
): string {
  return JSON.stringify(
    V3CompleteResponseEvaluation$outboundSchema.parse(
      v3CompleteResponseEvaluation,
    ),
  );
}

export function v3CompleteResponseEvaluationFromJSON(
  jsonString: string,
): SafeParseResult<V3CompleteResponseEvaluation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CompleteResponseEvaluation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CompleteResponseEvaluation' from JSON`,
  );
}

/** @internal */
export const V3CompleteResponse$inboundSchema: z.ZodType<
  V3CompleteResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  evaluation: z.record(z.lazy(() => V3CompleteResponseEvaluation$inboundSchema))
    .optional(),
  idv: IDVDataInternal$inboundSchema.optional(),
  kyc: KYCInternal$inboundSchema.optional(),
  next: z.record(z.string()),
  success: z.boolean(),
});

/** @internal */
export type V3CompleteResponse$Outbound = {
  evaluation?:
    | { [k: string]: V3CompleteResponseEvaluation$Outbound }
    | undefined;
  idv?: IDVDataInternal$Outbound | undefined;
  kyc?: KYCInternal$Outbound | undefined;
  next: { [k: string]: string };
  success: boolean;
};

/** @internal */
export const V3CompleteResponse$outboundSchema: z.ZodType<
  V3CompleteResponse$Outbound,
  z.ZodTypeDef,
  V3CompleteResponse
> = z.object({
  evaluation: z.record(
    z.lazy(() => V3CompleteResponseEvaluation$outboundSchema),
  ).optional(),
  idv: IDVDataInternal$outboundSchema.optional(),
  kyc: KYCInternal$outboundSchema.optional(),
  next: z.record(z.string()),
  success: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CompleteResponse$ {
  /** @deprecated use `V3CompleteResponse$inboundSchema` instead. */
  export const inboundSchema = V3CompleteResponse$inboundSchema;
  /** @deprecated use `V3CompleteResponse$outboundSchema` instead. */
  export const outboundSchema = V3CompleteResponse$outboundSchema;
  /** @deprecated use `V3CompleteResponse$Outbound` instead. */
  export type Outbound = V3CompleteResponse$Outbound;
}

export function v3CompleteResponseToJSON(
  v3CompleteResponse: V3CompleteResponse,
): string {
  return JSON.stringify(
    V3CompleteResponse$outboundSchema.parse(v3CompleteResponse),
  );
}

export function v3CompleteResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3CompleteResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CompleteResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CompleteResponse' from JSON`,
  );
}
