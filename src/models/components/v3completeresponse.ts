/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IDVData, IDVData$ } from "./idvdata.js";
import * as z from "zod";

export type V3CompleteResponse = {
    idv?: IDVData | undefined;
    /**
     * Kyc contains optional KYC data to be returned.
     */
    kyc?: string | undefined;
    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    next: { [k: string]: string };
    /**
     * Success returns true if the individual was verified successfully.
     */
    success: boolean;
};

/** @internal */
export namespace V3CompleteResponse$ {
    export const inboundSchema: z.ZodType<V3CompleteResponse, z.ZodTypeDef, unknown> = z.object({
        idv: IDVData$.inboundSchema.optional(),
        kyc: z.string().optional(),
        next: z.record(z.string()),
        success: z.boolean(),
    });

    export type Outbound = {
        idv?: IDVData$.Outbound | undefined;
        kyc?: string | undefined;
        next: { [k: string]: string };
        success: boolean;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V3CompleteResponse> = z.object({
        idv: IDVData$.outboundSchema.optional(),
        kyc: z.string().optional(),
        next: z.record(z.string()),
        success: z.boolean(),
    });
}
