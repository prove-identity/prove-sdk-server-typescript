/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type AddressEntry = {
    /**
     * Address is the street address of the individual.
     */
    address?: string | undefined;
    /**
     * City of the individual.
     */
    city?: string | undefined;
    /**
     * Extended address is the apartment number or other extended address information.
     */
    extendedAddress?: string | undefined;
    /**
     * Postal code is the zip code of the individual.
     */
    postalCode?: string | undefined;
    /**
     * Region is the state or locality of the individual.
     */
    region?: string | undefined;
};

/** @internal */
export namespace AddressEntry$ {
    export const inboundSchema: z.ZodType<AddressEntry, z.ZodTypeDef, unknown> = z
        .object({
            address: z.string().default("39 South Trail"),
            city: z.string().default("San Antonio"),
            extendedAddress: z.string().optional(),
            postalCode: z.string().default("78285"),
            region: z.string().default("TX"),
        })
        .transform((v) => {
            return {
                address: v.address,
                city: v.city,
                ...(v.extendedAddress === undefined
                    ? null
                    : { extendedAddress: v.extendedAddress }),
                postalCode: v.postalCode,
                region: v.region,
            };
        });

    export type Outbound = {
        address: string;
        city: string;
        extendedAddress?: string | undefined;
        postalCode: string;
        region: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AddressEntry> = z
        .object({
            address: z.string().default("39 South Trail"),
            city: z.string().default("San Antonio"),
            extendedAddress: z.string().optional(),
            postalCode: z.string().default("78285"),
            region: z.string().default("TX"),
        })
        .transform((v) => {
            return {
                address: v.address,
                city: v.city,
                ...(v.extendedAddress === undefined
                    ? null
                    : { extendedAddress: v.extendedAddress }),
                postalCode: v.postalCode,
                region: v.region,
            };
        });
}
