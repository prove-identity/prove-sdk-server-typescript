/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Represents a single identity that you wish to enroll.
 */
export type IdentityItem = {
  /**
   * A client-generated unique ID for a specific customer. This ID links calls related to the same customer, across different requests or sessions. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
   */
  clientCustomerId?: string | undefined;
  /**
   * A string that is the unique identifier for the Prove Key on the device. Only applicable if you are leveraging Prove Unify.
   */
  deviceId?: string | undefined;
  /**
   * The number of the consumer being enrolled. US phone numbers can be passed in with or without a leading +1. Acceptable characters are: alphanumeric with symbols '+'.
   */
  phoneNumber: string;
};

/** @internal */
export const IdentityItem$inboundSchema: z.ZodType<
  IdentityItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientCustomerId: z.string().optional(),
  deviceId: z.string().optional(),
  phoneNumber: z.string(),
});

/** @internal */
export type IdentityItem$Outbound = {
  clientCustomerId?: string | undefined;
  deviceId?: string | undefined;
  phoneNumber: string;
};

/** @internal */
export const IdentityItem$outboundSchema: z.ZodType<
  IdentityItem$Outbound,
  z.ZodTypeDef,
  IdentityItem
> = z.object({
  clientCustomerId: z.string().optional(),
  deviceId: z.string().optional(),
  phoneNumber: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IdentityItem$ {
  /** @deprecated use `IdentityItem$inboundSchema` instead. */
  export const inboundSchema = IdentityItem$inboundSchema;
  /** @deprecated use `IdentityItem$outboundSchema` instead. */
  export const outboundSchema = IdentityItem$outboundSchema;
  /** @deprecated use `IdentityItem$Outbound` instead. */
  export type Outbound = IdentityItem$Outbound;
}

export function identityItemToJSON(identityItem: IdentityItem): string {
  return JSON.stringify(IdentityItem$outboundSchema.parse(identityItem));
}

export function identityItemFromJSON(
  jsonString: string,
): SafeParseResult<IdentityItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IdentityItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IdentityItem' from JSON`,
  );
}
