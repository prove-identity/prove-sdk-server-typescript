/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DataSource, DataSource$ } from "./datasource.js";
import * as z from "zod";

export type IDVData = {
    dataSource1?: DataSource | undefined;
    dataSource2?: DataSource | undefined;
    multiCIPConfidence?: string | undefined;
    multiVerified?: boolean | undefined;
};

/** @internal */
export namespace IDVData$ {
    export const inboundSchema: z.ZodType<IDVData, z.ZodTypeDef, unknown> = z.object({
        dataSource1: DataSource$.inboundSchema.optional(),
        dataSource2: DataSource$.inboundSchema.optional(),
        multiCIPConfidence: z.string().optional(),
        multiVerified: z.boolean().optional(),
    });

    export type Outbound = {
        dataSource1?: DataSource$.Outbound | undefined;
        dataSource2?: DataSource$.Outbound | undefined;
        multiCIPConfidence?: string | undefined;
        multiVerified?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IDVData> = z.object({
        dataSource1: DataSource$.outboundSchema.optional(),
        dataSource2: DataSource$.outboundSchema.optional(),
        multiCIPConfidence: z.string().optional(),
        multiVerified: z.boolean().optional(),
    });
}
