/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VerifyItem = {
  /**
   * A client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Customer ID. Do not include personally identifiable information (PII) in this field.
   */
  clientCustomerId?: string | undefined;
  /**
   * An optional client-generated unique ID our Enterprise customer inputs for that consumer across business lines. If the Enterprise customer has been able to identify a consumer across business lines and has a unique identifier for the consumer, they would input this value to Prove.The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include personally identifiable information (PII) in this field.
   */
  clientHumanId?: string | undefined;
  /**
   * The email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
   */
  emailAddress?: string | undefined;
  /**
   * The first name of the individual.
   */
  firstName: string;
  /**
   * The IP address of the customer.
   */
  ipAddress?: string | undefined;
  /**
   * The last name of the individual.
   */
  lastName: string;
  /**
   * The mobile phone number. US phone numbers can be passed in with or without a leading `+1`. International phone numbers require a leading `+1`. Use the appropriate endpoint URL based on the region the number originates from. Acceptable characters are: alphanumeric with symbols '+'.
   */
  phoneNumber: string;
  /**
   * The User agent of the customer.
   */
  userAgent?: string | undefined;
  /**
   * The verification method based on the use case and authorization level.
   */
  verificationType?: string | undefined;
};

/** @internal */
export const VerifyItem$inboundSchema: z.ZodType<
  VerifyItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientCustomerId: z.string().optional(),
  clientHumanId: z.string().optional(),
  emailAddress: z.string().optional(),
  firstName: z.string(),
  ipAddress: z.string().optional(),
  lastName: z.string(),
  phoneNumber: z.string(),
  userAgent: z.string().optional(),
  verificationType: z.string().optional(),
});

/** @internal */
export type VerifyItem$Outbound = {
  clientCustomerId?: string | undefined;
  clientHumanId?: string | undefined;
  emailAddress?: string | undefined;
  firstName: string;
  ipAddress?: string | undefined;
  lastName: string;
  phoneNumber: string;
  userAgent?: string | undefined;
  verificationType?: string | undefined;
};

/** @internal */
export const VerifyItem$outboundSchema: z.ZodType<
  VerifyItem$Outbound,
  z.ZodTypeDef,
  VerifyItem
> = z.object({
  clientCustomerId: z.string().optional(),
  clientHumanId: z.string().optional(),
  emailAddress: z.string().optional(),
  firstName: z.string(),
  ipAddress: z.string().optional(),
  lastName: z.string(),
  phoneNumber: z.string(),
  userAgent: z.string().optional(),
  verificationType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyItem$ {
  /** @deprecated use `VerifyItem$inboundSchema` instead. */
  export const inboundSchema = VerifyItem$inboundSchema;
  /** @deprecated use `VerifyItem$outboundSchema` instead. */
  export const outboundSchema = VerifyItem$outboundSchema;
  /** @deprecated use `VerifyItem$Outbound` instead. */
  export type Outbound = VerifyItem$Outbound;
}

export function verifyItemToJSON(verifyItem: VerifyItem): string {
  return JSON.stringify(VerifyItem$outboundSchema.parse(verifyItem));
}

export function verifyItemFromJSON(
  jsonString: string,
): SafeParseResult<VerifyItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyItem' from JSON`,
  );
}
