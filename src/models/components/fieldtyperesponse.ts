/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type FieldTypeResponse = {
    name?: string | undefined;
    source?: string | undefined;
    value?: string | undefined;
};

/** @internal */
export namespace FieldTypeResponse$ {
    export const inboundSchema: z.ZodType<FieldTypeResponse, z.ZodTypeDef, unknown> = z
        .object({
            Name: z.string().optional(),
            Source: z.string().optional(),
            Value: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                Name: "name",
                Source: "source",
                Value: "value",
            });
        });

    export type Outbound = {
        Name?: string | undefined;
        Source?: string | undefined;
        Value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FieldTypeResponse> = z
        .object({
            name: z.string().optional(),
            source: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                name: "Name",
                source: "Source",
                value: "Value",
            });
        });
}
