/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataSourceIdentifiersResponseInternal = {
  dob?: boolean | undefined;
  last4?: boolean | undefined;
  ssn?: boolean | undefined;
};

/** @internal */
export const DataSourceIdentifiersResponseInternal$inboundSchema: z.ZodType<
  DataSourceIdentifiersResponseInternal,
  z.ZodTypeDef,
  unknown
> = z.object({
  dob: z.boolean().optional(),
  last4: z.boolean().optional(),
  ssn: z.boolean().optional(),
});

/** @internal */
export type DataSourceIdentifiersResponseInternal$Outbound = {
  dob?: boolean | undefined;
  last4?: boolean | undefined;
  ssn?: boolean | undefined;
};

/** @internal */
export const DataSourceIdentifiersResponseInternal$outboundSchema: z.ZodType<
  DataSourceIdentifiersResponseInternal$Outbound,
  z.ZodTypeDef,
  DataSourceIdentifiersResponseInternal
> = z.object({
  dob: z.boolean().optional(),
  last4: z.boolean().optional(),
  ssn: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourceIdentifiersResponseInternal$ {
  /** @deprecated use `DataSourceIdentifiersResponseInternal$inboundSchema` instead. */
  export const inboundSchema =
    DataSourceIdentifiersResponseInternal$inboundSchema;
  /** @deprecated use `DataSourceIdentifiersResponseInternal$outboundSchema` instead. */
  export const outboundSchema =
    DataSourceIdentifiersResponseInternal$outboundSchema;
  /** @deprecated use `DataSourceIdentifiersResponseInternal$Outbound` instead. */
  export type Outbound = DataSourceIdentifiersResponseInternal$Outbound;
}

export function dataSourceIdentifiersResponseInternalToJSON(
  dataSourceIdentifiersResponseInternal: DataSourceIdentifiersResponseInternal,
): string {
  return JSON.stringify(
    DataSourceIdentifiersResponseInternal$outboundSchema.parse(
      dataSourceIdentifiersResponseInternal,
    ),
  );
}

export function dataSourceIdentifiersResponseInternalFromJSON(
  jsonString: string,
): SafeParseResult<DataSourceIdentifiersResponseInternal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DataSourceIdentifiersResponseInternal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourceIdentifiersResponseInternal' from JSON`,
  );
}
