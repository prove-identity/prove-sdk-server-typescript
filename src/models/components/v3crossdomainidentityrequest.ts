/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request body for the V3 Identity Cross Domain API.
 */
export type V3CrossDomainIdentityRequest = {
  /**
   * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
   */
  clientRequestId?: string | undefined;
};

/** @internal */
export const V3CrossDomainIdentityRequest$inboundSchema: z.ZodType<
  V3CrossDomainIdentityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientRequestId: z.string().optional(),
});

/** @internal */
export type V3CrossDomainIdentityRequest$Outbound = {
  clientRequestId?: string | undefined;
};

/** @internal */
export const V3CrossDomainIdentityRequest$outboundSchema: z.ZodType<
  V3CrossDomainIdentityRequest$Outbound,
  z.ZodTypeDef,
  V3CrossDomainIdentityRequest
> = z.object({
  clientRequestId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3CrossDomainIdentityRequest$ {
  /** @deprecated use `V3CrossDomainIdentityRequest$inboundSchema` instead. */
  export const inboundSchema = V3CrossDomainIdentityRequest$inboundSchema;
  /** @deprecated use `V3CrossDomainIdentityRequest$outboundSchema` instead. */
  export const outboundSchema = V3CrossDomainIdentityRequest$outboundSchema;
  /** @deprecated use `V3CrossDomainIdentityRequest$Outbound` instead. */
  export type Outbound = V3CrossDomainIdentityRequest$Outbound;
}

export function v3CrossDomainIdentityRequestToJSON(
  v3CrossDomainIdentityRequest: V3CrossDomainIdentityRequest,
): string {
  return JSON.stringify(
    V3CrossDomainIdentityRequest$outboundSchema.parse(
      v3CrossDomainIdentityRequest,
    ),
  );
}

export function v3CrossDomainIdentityRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3CrossDomainIdentityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3CrossDomainIdentityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3CrossDomainIdentityRequest' from JSON`,
  );
}
