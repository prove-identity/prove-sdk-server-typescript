/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V3StartResponse = {
    /**
     * AuthToken is a bearer token for use by the Prove Client SDK.
     */
    authToken: string;
    /**
     * Correlation ID is the unique ID of the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow.
     */
    correlationId: string;
    /**
     * Next contains the next set of allowed calls in the same flow.
     */
    next: { [k: string]: string };
};

/** @internal */
export namespace V3StartResponse$ {
    export const inboundSchema: z.ZodType<V3StartResponse, z.ZodTypeDef, unknown> = z
        .object({
            authToken: z.string(),
            correlationId: z.string(),
            next: z.record(z.string()),
        })
        .transform((v) => {
            return {
                authToken: v.authToken,
                correlationId: v.correlationId,
                next: v.next,
            };
        });

    export type Outbound = {
        authToken: string;
        correlationId: string;
        next: { [k: string]: string };
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V3StartResponse> = z
        .object({
            authToken: z.string(),
            correlationId: z.string(),
            next: z.record(z.string()),
        })
        .transform((v) => {
            return {
                authToken: v.authToken,
                correlationId: v.correlationId,
                next: v.next,
            };
        });
}
