/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type V3TokenRequest = {
    /**
     * ClientID is the optional client ID.
     */
    clientId?: string | undefined;
    /**
     * GrantType only allows option: `password`.
     */
    grantType: string;
    /**
     * Password is the secret ID provided to the customer during onboarding.
     */
    password: string;
    /**
     * Username is the ID provided to the customer during onboarding.
     */
    username: string;
};

/** @internal */
export namespace V3TokenRequest$ {
    export const inboundSchema: z.ZodType<V3TokenRequest, z.ZodTypeDef, unknown> = z
        .object({
            client_id: z.string().optional(),
            grant_type: z.string(),
            password: z.string(),
            username: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                client_id: "clientId",
                grant_type: "grantType",
            });
        });

    export type Outbound = {
        client_id?: string | undefined;
        grant_type: string;
        password: string;
        username: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V3TokenRequest> = z
        .object({
            clientId: z.string().optional(),
            grantType: z.string(),
            password: z.string(),
            username: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                clientId: "client_id",
                grantType: "grant_type",
            });
        });
}
