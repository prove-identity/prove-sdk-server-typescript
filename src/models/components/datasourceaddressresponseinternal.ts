/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataSourceAddressResponseInternal = {
  addressScore?: number | undefined;
  city?: boolean | undefined;
  distance?: number | undefined;
  postalCode?: boolean | undefined;
  region?: boolean | undefined;
  street?: boolean | undefined;
  streetNumber?: number | undefined;
};

/** @internal */
export const DataSourceAddressResponseInternal$inboundSchema: z.ZodType<
  DataSourceAddressResponseInternal,
  z.ZodTypeDef,
  unknown
> = z.object({
  addressScore: z.number().int().optional(),
  city: z.boolean().optional(),
  distance: z.number().optional(),
  postalCode: z.boolean().optional(),
  region: z.boolean().optional(),
  street: z.boolean().optional(),
  streetNumber: z.number().int().optional(),
});

/** @internal */
export type DataSourceAddressResponseInternal$Outbound = {
  addressScore?: number | undefined;
  city?: boolean | undefined;
  distance?: number | undefined;
  postalCode?: boolean | undefined;
  region?: boolean | undefined;
  street?: boolean | undefined;
  streetNumber?: number | undefined;
};

/** @internal */
export const DataSourceAddressResponseInternal$outboundSchema: z.ZodType<
  DataSourceAddressResponseInternal$Outbound,
  z.ZodTypeDef,
  DataSourceAddressResponseInternal
> = z.object({
  addressScore: z.number().int().optional(),
  city: z.boolean().optional(),
  distance: z.number().optional(),
  postalCode: z.boolean().optional(),
  region: z.boolean().optional(),
  street: z.boolean().optional(),
  streetNumber: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourceAddressResponseInternal$ {
  /** @deprecated use `DataSourceAddressResponseInternal$inboundSchema` instead. */
  export const inboundSchema = DataSourceAddressResponseInternal$inboundSchema;
  /** @deprecated use `DataSourceAddressResponseInternal$outboundSchema` instead. */
  export const outboundSchema =
    DataSourceAddressResponseInternal$outboundSchema;
  /** @deprecated use `DataSourceAddressResponseInternal$Outbound` instead. */
  export type Outbound = DataSourceAddressResponseInternal$Outbound;
}

export function dataSourceAddressResponseInternalToJSON(
  dataSourceAddressResponseInternal: DataSourceAddressResponseInternal,
): string {
  return JSON.stringify(
    DataSourceAddressResponseInternal$outboundSchema.parse(
      dataSourceAddressResponseInternal,
    ),
  );
}

export function dataSourceAddressResponseInternalFromJSON(
  jsonString: string,
): SafeParseResult<DataSourceAddressResponseInternal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DataSourceAddressResponseInternal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourceAddressResponseInternal' from JSON`,
  );
}
