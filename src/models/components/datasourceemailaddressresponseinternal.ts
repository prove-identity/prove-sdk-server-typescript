/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DataSourceEmailAddressResponseInternal = {
  emailAddress?: boolean | undefined;
};

/** @internal */
export const DataSourceEmailAddressResponseInternal$inboundSchema: z.ZodType<
  DataSourceEmailAddressResponseInternal,
  z.ZodTypeDef,
  unknown
> = z.object({
  emailAddress: z.boolean().optional(),
});

/** @internal */
export type DataSourceEmailAddressResponseInternal$Outbound = {
  emailAddress?: boolean | undefined;
};

/** @internal */
export const DataSourceEmailAddressResponseInternal$outboundSchema: z.ZodType<
  DataSourceEmailAddressResponseInternal$Outbound,
  z.ZodTypeDef,
  DataSourceEmailAddressResponseInternal
> = z.object({
  emailAddress: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DataSourceEmailAddressResponseInternal$ {
  /** @deprecated use `DataSourceEmailAddressResponseInternal$inboundSchema` instead. */
  export const inboundSchema =
    DataSourceEmailAddressResponseInternal$inboundSchema;
  /** @deprecated use `DataSourceEmailAddressResponseInternal$outboundSchema` instead. */
  export const outboundSchema =
    DataSourceEmailAddressResponseInternal$outboundSchema;
  /** @deprecated use `DataSourceEmailAddressResponseInternal$Outbound` instead. */
  export type Outbound = DataSourceEmailAddressResponseInternal$Outbound;
}

export function dataSourceEmailAddressResponseInternalToJSON(
  dataSourceEmailAddressResponseInternal:
    DataSourceEmailAddressResponseInternal,
): string {
  return JSON.stringify(
    DataSourceEmailAddressResponseInternal$outboundSchema.parse(
      dataSourceEmailAddressResponseInternal,
    ),
  );
}

export function dataSourceEmailAddressResponseInternalFromJSON(
  jsonString: string,
): SafeParseResult<DataSourceEmailAddressResponseInternal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DataSourceEmailAddressResponseInternal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DataSourceEmailAddressResponseInternal' from JSON`,
  );
}
