/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type V3StartRequest = {
    /**
     * Device ID is the ID of the device. Acceptable characters are: alphanumeric with symbols '-._+=/'.
     */
    deviceId?: string | undefined;
    /**
     * DOB, an optional challenge, is the date of birth in this format: YYYYY-MM-DD. Acceptable characters are: numeric with symbol '-'.
     */
    dob?: string | undefined;
    /**
     * Email is the email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
     */
    emailAddress?: string | undefined;
    /**
     * Final target URL is the URL where the end user will be redirected at the end of Instant Link. Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
     */
    finalTargetUrl?: string | undefined;
    /**
     * Flow type is based on the method used  - either desktop for native for iOS/Android native apps or mobile web. Acceptable options are: native or web.
     */
    flowType: string;
    /**
     * IP address is the IP address of the device of the customer. Acceptable characters are: numeric with symbols ':.'.
     */
    ipAddress?: string | undefined;
    /**
     * Last4SSN, an optional challenge, is the last 4 numbers of the social security number. Acceptable characters are: numeric.
     */
    last4SSN?: string | undefined;
    /**
     * Phone number is the number of the mobile phone. Acceptable characters are: alphanumeric with symbols '+'.
     */
    phoneNumber?: string | undefined;
};

/** @internal */
export namespace V3StartRequest$ {
    export const inboundSchema: z.ZodType<V3StartRequest, z.ZodTypeDef, unknown> = z
        .object({
            deviceId: z.string().optional(),
            dob: z.string().optional(),
            emailAddress: z.string().optional(),
            finalTargetUrl: z.string().optional(),
            flowType: z.string(),
            ipAddress: z.string().optional(),
            last4SSN: z.string().optional(),
            phoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.deviceId === undefined ? null : { deviceId: v.deviceId }),
                ...(v.dob === undefined ? null : { dob: v.dob }),
                ...(v.emailAddress === undefined ? null : { emailAddress: v.emailAddress }),
                ...(v.finalTargetUrl === undefined ? null : { finalTargetUrl: v.finalTargetUrl }),
                flowType: v.flowType,
                ...(v.ipAddress === undefined ? null : { ipAddress: v.ipAddress }),
                ...(v.last4SSN === undefined ? null : { last4SSN: v.last4SSN }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
            };
        });

    export type Outbound = {
        deviceId?: string | undefined;
        dob?: string | undefined;
        emailAddress?: string | undefined;
        finalTargetUrl?: string | undefined;
        flowType: string;
        ipAddress?: string | undefined;
        last4SSN?: string | undefined;
        phoneNumber?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V3StartRequest> = z
        .object({
            deviceId: z.string().optional(),
            dob: z.string().optional(),
            emailAddress: z.string().optional(),
            finalTargetUrl: z.string().optional(),
            flowType: z.string(),
            ipAddress: z.string().optional(),
            last4SSN: z.string().optional(),
            phoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.deviceId === undefined ? null : { deviceId: v.deviceId }),
                ...(v.dob === undefined ? null : { dob: v.dob }),
                ...(v.emailAddress === undefined ? null : { emailAddress: v.emailAddress }),
                ...(v.finalTargetUrl === undefined ? null : { finalTargetUrl: v.finalTargetUrl }),
                flowType: v.flowType,
                ...(v.ipAddress === undefined ? null : { ipAddress: v.ipAddress }),
                ...(v.last4SSN === undefined ? null : { last4SSN: v.last4SSN }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
            };
        });
}
