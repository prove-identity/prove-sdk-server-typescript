/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AddressEntry, AddressEntry$ } from "./addressentry";
import * as z from "zod";

export type Individual = {
    /**
     * Addresses that belong to the individual.
     */
    addresses?: Array<AddressEntry> | undefined;
    /**
     * DOB is the date of birth of the individual.
     */
    dob?: string | undefined;
    /**
     * Email addresses that belong to the individual.
     */
    emailAddresses?: Array<string> | undefined;
    /**
     * First name of the individual.
     */
    firstName?: string | undefined;
    /**
     * Last name of the individual.
     */
    lastName?: string | undefined;
    /**
     * SSN is the social security number of the individual.
     */
    ssn?: string | undefined;
};

/** @internal */
export namespace Individual$ {
    export const inboundSchema: z.ZodType<Individual, z.ZodTypeDef, unknown> = z.object({
        addresses: z.array(AddressEntry$.inboundSchema).optional(),
        dob: z.string().optional(),
        emailAddresses: z.array(z.string()).optional(),
        firstName: z.string().optional(),
        lastName: z.string().optional(),
        ssn: z.string().optional(),
    });

    export type Outbound = {
        addresses?: Array<AddressEntry$.Outbound> | undefined;
        dob?: string | undefined;
        emailAddresses?: Array<string> | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        ssn?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Individual> = z.object({
        addresses: z.array(AddressEntry$.outboundSchema).optional(),
        dob: z.string().optional(),
        emailAddresses: z.array(z.string()).optional(),
        firstName: z.string().optional(),
        lastName: z.string().optional(),
        ssn: z.string().optional(),
    });
}
