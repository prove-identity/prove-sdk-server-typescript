/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Request body for the V3 Verify API
 */
export type V3VerifyRequest = {
  /**
   * Client Customer ID is a client-generated unique ID for a specific customer. This can be used by clients to link calls related to the same customer, across different requests or sessions.  The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Request ID at this time, and this is expected to be added in a future release. NOTE: Do not include Personally Identifiable Information (PII) in this field.
   */
  clientCustomerId?: string | undefined;
  /**
   * Client Request ID is a client-generated unique ID for a specific session. This can be used by clients to identify specific requests made to Prove Link. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Prove does not offer any functionality around the Client Request ID at this time, and this is expected to be added in a future release. NOTE: Do not include Personally Identifiable Information (PII) in this field.
   */
  clientRequestId?: string | undefined;
  /**
   * Email is the email address of the customer. Acceptable characters are: alphanumeric with symbols '@.+'.
   */
  emailAddress?: string | undefined;
  /**
   * Final target URL is only required for when flowType=desktop. The final target URL is where the end user will be redirected at the end of Instant Link flow. Acceptable characters are: alphanumeric with symbols '-._+=/:?'.
   */
  finalTargetUrl?: string | undefined;
  /**
   * First name of the individual.
   */
  firstName: string;
  /**
   * Last name of the individual.
   */
  lastName: string;
  /**
   * Phone number is the number of the mobile phone. The field is required in the Sandbox environment. US phone numbers can be passed in with or without a leading `+1`. Acceptable characters are: alphanumeric with symbols '+'.
   */
  phoneNumber: string;
  /**
   * Possession type is based on the method used - either 'desktop' if using desktop, 'mobile' for iOS/Android native apps and mobile web, or 'none' if no possession check is required. Acceptable options are: 'desktop', 'mobile', and 'none'.
   */
  possessionType: string;
  /**
   * SMSMessage is an optional field to customize the message body sent in the Instant Link (flowType=desktop) or OTP (on mobile) SMS message.
   *
   * @remarks
   * If not provided, the following default messages will be used:
   * 1. For Instant Link: "Complete your verification. If you did not make this request, do not click the link. ####"
   * 2. For OTP: "#### is your temporary code to continue your application. Caution: for your security, don't share this code with anyone."
   * Max length is 160 characters. Only ASCII characters are allowed.
   *
   * The placeholder format varies by flow type:
   * 1. For OTP (mobile flow): Use ####, #####, or ###### to generate 4-6 digit verification codes respectively.
   * 2. For Instant Link (desktop flow): Must use exactly #### which will be replaced with the verification URL.
   */
  smsMessage?: string | undefined;
};

/** @internal */
export const V3VerifyRequest$inboundSchema: z.ZodType<
  V3VerifyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientCustomerId: z.string().optional(),
  clientRequestId: z.string().optional(),
  emailAddress: z.string().optional(),
  finalTargetUrl: z.string().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phoneNumber: z.string(),
  possessionType: z.string(),
  smsMessage: z.string().optional(),
});

/** @internal */
export type V3VerifyRequest$Outbound = {
  clientCustomerId?: string | undefined;
  clientRequestId?: string | undefined;
  emailAddress?: string | undefined;
  finalTargetUrl?: string | undefined;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  possessionType: string;
  smsMessage?: string | undefined;
};

/** @internal */
export const V3VerifyRequest$outboundSchema: z.ZodType<
  V3VerifyRequest$Outbound,
  z.ZodTypeDef,
  V3VerifyRequest
> = z.object({
  clientCustomerId: z.string().optional(),
  clientRequestId: z.string().optional(),
  emailAddress: z.string().optional(),
  finalTargetUrl: z.string().optional(),
  firstName: z.string(),
  lastName: z.string(),
  phoneNumber: z.string(),
  possessionType: z.string(),
  smsMessage: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3VerifyRequest$ {
  /** @deprecated use `V3VerifyRequest$inboundSchema` instead. */
  export const inboundSchema = V3VerifyRequest$inboundSchema;
  /** @deprecated use `V3VerifyRequest$outboundSchema` instead. */
  export const outboundSchema = V3VerifyRequest$outboundSchema;
  /** @deprecated use `V3VerifyRequest$Outbound` instead. */
  export type Outbound = V3VerifyRequest$Outbound;
}

export function v3VerifyRequestToJSON(
  v3VerifyRequest: V3VerifyRequest,
): string {
  return JSON.stringify(V3VerifyRequest$outboundSchema.parse(v3VerifyRequest));
}

export function v3VerifyRequestFromJSON(
  jsonString: string,
): SafeParseResult<V3VerifyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3VerifyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3VerifyRequest' from JSON`,
  );
}
