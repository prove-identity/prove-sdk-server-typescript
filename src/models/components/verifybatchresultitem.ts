/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AdditionalIdentity,
  AdditionalIdentity$inboundSchema,
  AdditionalIdentity$Outbound,
  AdditionalIdentity$outboundSchema,
} from "./additionalidentity.js";
import {
  Identity,
  Identity$inboundSchema,
  Identity$Outbound,
  Identity$outboundSchema,
} from "./identity.js";

export type VerifyBatchResultItemEvaluation = {};

export type VerifyBatchResultItem = {
  /**
   * (required IF verificationType=VerifiedUser)
   */
  additionalIdentities?: Array<AdditionalIdentity> | undefined;
  /**
   * An error message for this corresponding specific verification.
   */
  error?: string | undefined;
  /**
   * The evaluation result for the policy. This is an upcoming field but is not yet enabled.
   */
  evaluation?: { [k: string]: VerifyBatchResultItemEvaluation } | undefined;
  identity: Identity;
  /**
   * The mobile phone number. US phone numbers can be passed in with or without a leading `+1`. International phone numbers require a leading `+1`. Use the appropriate endpoint URL based on the region the number originates from. Acceptable characters are: alphanumeric with symbols '+'.
   */
  phoneNumber: string;
  /**
   * The result of the combination of `verifyResult` and `possessionResult`. Possible values are `true`, `pending`, and `false`. The value will be `pending` until the results of both Verify and Possession are returned or one of them fails, blocking the other.
   */
  success: string;
};

/** @internal */
export const VerifyBatchResultItemEvaluation$inboundSchema: z.ZodType<
  VerifyBatchResultItemEvaluation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type VerifyBatchResultItemEvaluation$Outbound = {};

/** @internal */
export const VerifyBatchResultItemEvaluation$outboundSchema: z.ZodType<
  VerifyBatchResultItemEvaluation$Outbound,
  z.ZodTypeDef,
  VerifyBatchResultItemEvaluation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyBatchResultItemEvaluation$ {
  /** @deprecated use `VerifyBatchResultItemEvaluation$inboundSchema` instead. */
  export const inboundSchema = VerifyBatchResultItemEvaluation$inboundSchema;
  /** @deprecated use `VerifyBatchResultItemEvaluation$outboundSchema` instead. */
  export const outboundSchema = VerifyBatchResultItemEvaluation$outboundSchema;
  /** @deprecated use `VerifyBatchResultItemEvaluation$Outbound` instead. */
  export type Outbound = VerifyBatchResultItemEvaluation$Outbound;
}

export function verifyBatchResultItemEvaluationToJSON(
  verifyBatchResultItemEvaluation: VerifyBatchResultItemEvaluation,
): string {
  return JSON.stringify(
    VerifyBatchResultItemEvaluation$outboundSchema.parse(
      verifyBatchResultItemEvaluation,
    ),
  );
}

export function verifyBatchResultItemEvaluationFromJSON(
  jsonString: string,
): SafeParseResult<VerifyBatchResultItemEvaluation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyBatchResultItemEvaluation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyBatchResultItemEvaluation' from JSON`,
  );
}

/** @internal */
export const VerifyBatchResultItem$inboundSchema: z.ZodType<
  VerifyBatchResultItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  additionalIdentities: z.array(AdditionalIdentity$inboundSchema).optional(),
  error: z.string().optional(),
  evaluation: z.record(
    z.lazy(() => VerifyBatchResultItemEvaluation$inboundSchema),
  ).optional(),
  identity: Identity$inboundSchema,
  phoneNumber: z.string(),
  success: z.string(),
});

/** @internal */
export type VerifyBatchResultItem$Outbound = {
  additionalIdentities?: Array<AdditionalIdentity$Outbound> | undefined;
  error?: string | undefined;
  evaluation?:
    | { [k: string]: VerifyBatchResultItemEvaluation$Outbound }
    | undefined;
  identity: Identity$Outbound;
  phoneNumber: string;
  success: string;
};

/** @internal */
export const VerifyBatchResultItem$outboundSchema: z.ZodType<
  VerifyBatchResultItem$Outbound,
  z.ZodTypeDef,
  VerifyBatchResultItem
> = z.object({
  additionalIdentities: z.array(AdditionalIdentity$outboundSchema).optional(),
  error: z.string().optional(),
  evaluation: z.record(
    z.lazy(() => VerifyBatchResultItemEvaluation$outboundSchema),
  ).optional(),
  identity: Identity$outboundSchema,
  phoneNumber: z.string(),
  success: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyBatchResultItem$ {
  /** @deprecated use `VerifyBatchResultItem$inboundSchema` instead. */
  export const inboundSchema = VerifyBatchResultItem$inboundSchema;
  /** @deprecated use `VerifyBatchResultItem$outboundSchema` instead. */
  export const outboundSchema = VerifyBatchResultItem$outboundSchema;
  /** @deprecated use `VerifyBatchResultItem$Outbound` instead. */
  export type Outbound = VerifyBatchResultItem$Outbound;
}

export function verifyBatchResultItemToJSON(
  verifyBatchResultItem: VerifyBatchResultItem,
): string {
  return JSON.stringify(
    VerifyBatchResultItem$outboundSchema.parse(verifyBatchResultItem),
  );
}

export function verifyBatchResultItemFromJSON(
  jsonString: string,
): SafeParseResult<VerifyBatchResultItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyBatchResultItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyBatchResultItem' from JSON`,
  );
}
