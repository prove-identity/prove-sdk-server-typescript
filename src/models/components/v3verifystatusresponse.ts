/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3VerifyStatusResponseEvaluation = {};

export type V3VerifyStatusResponse = {
  /**
   * The evaluation result for the policy
   */
  evaluation?: { [k: string]: V3VerifyStatusResponseEvaluation } | undefined;
  /**
   * A unique ID that Prove generates to refer to a specific identity.
   */
  identityId?: string | undefined;
  /**
   * The result of the possession check. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
   */
  possessionResult: string;
  /**
   * The result of the combination of Verify Result and Possession Result. Possible values are `true`, `pending`, and `false`. The success value will be `pending` until the results of both Verify and Possession are returned or one of them fails, blocking the other.
   */
  success: string;
  /**
   * The result of the Verify process. Possible values are `success`, `pending`, `failed`, and `not_applicable`.
   */
  verifyResult: string;
};

/** @internal */
export const V3VerifyStatusResponseEvaluation$inboundSchema: z.ZodType<
  V3VerifyStatusResponseEvaluation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type V3VerifyStatusResponseEvaluation$Outbound = {};

/** @internal */
export const V3VerifyStatusResponseEvaluation$outboundSchema: z.ZodType<
  V3VerifyStatusResponseEvaluation$Outbound,
  z.ZodTypeDef,
  V3VerifyStatusResponseEvaluation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3VerifyStatusResponseEvaluation$ {
  /** @deprecated use `V3VerifyStatusResponseEvaluation$inboundSchema` instead. */
  export const inboundSchema = V3VerifyStatusResponseEvaluation$inboundSchema;
  /** @deprecated use `V3VerifyStatusResponseEvaluation$outboundSchema` instead. */
  export const outboundSchema = V3VerifyStatusResponseEvaluation$outboundSchema;
  /** @deprecated use `V3VerifyStatusResponseEvaluation$Outbound` instead. */
  export type Outbound = V3VerifyStatusResponseEvaluation$Outbound;
}

export function v3VerifyStatusResponseEvaluationToJSON(
  v3VerifyStatusResponseEvaluation: V3VerifyStatusResponseEvaluation,
): string {
  return JSON.stringify(
    V3VerifyStatusResponseEvaluation$outboundSchema.parse(
      v3VerifyStatusResponseEvaluation,
    ),
  );
}

export function v3VerifyStatusResponseEvaluationFromJSON(
  jsonString: string,
): SafeParseResult<V3VerifyStatusResponseEvaluation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3VerifyStatusResponseEvaluation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3VerifyStatusResponseEvaluation' from JSON`,
  );
}

/** @internal */
export const V3VerifyStatusResponse$inboundSchema: z.ZodType<
  V3VerifyStatusResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  evaluation: z.record(
    z.lazy(() => V3VerifyStatusResponseEvaluation$inboundSchema),
  ).optional(),
  identityId: z.string().optional(),
  possessionResult: z.string(),
  success: z.string(),
  verifyResult: z.string(),
});

/** @internal */
export type V3VerifyStatusResponse$Outbound = {
  evaluation?:
    | { [k: string]: V3VerifyStatusResponseEvaluation$Outbound }
    | undefined;
  identityId?: string | undefined;
  possessionResult: string;
  success: string;
  verifyResult: string;
};

/** @internal */
export const V3VerifyStatusResponse$outboundSchema: z.ZodType<
  V3VerifyStatusResponse$Outbound,
  z.ZodTypeDef,
  V3VerifyStatusResponse
> = z.object({
  evaluation: z.record(
    z.lazy(() => V3VerifyStatusResponseEvaluation$outboundSchema),
  ).optional(),
  identityId: z.string().optional(),
  possessionResult: z.string(),
  success: z.string(),
  verifyResult: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3VerifyStatusResponse$ {
  /** @deprecated use `V3VerifyStatusResponse$inboundSchema` instead. */
  export const inboundSchema = V3VerifyStatusResponse$inboundSchema;
  /** @deprecated use `V3VerifyStatusResponse$outboundSchema` instead. */
  export const outboundSchema = V3VerifyStatusResponse$outboundSchema;
  /** @deprecated use `V3VerifyStatusResponse$Outbound` instead. */
  export type Outbound = V3VerifyStatusResponse$Outbound;
}

export function v3VerifyStatusResponseToJSON(
  v3VerifyStatusResponse: V3VerifyStatusResponse,
): string {
  return JSON.stringify(
    V3VerifyStatusResponse$outboundSchema.parse(v3VerifyStatusResponse),
  );
}

export function v3VerifyStatusResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3VerifyStatusResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3VerifyStatusResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3VerifyStatusResponse' from JSON`,
  );
}
