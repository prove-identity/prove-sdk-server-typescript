/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as z from "zod";

export type V3TokenResponse = {
    /**
     * AccessToken returns the access token as a string.
     */
    accessToken: string;
    /**
     * ExpiresIn returns the lifetime of the token in seconds.
     */
    expiresIn: number;
    /**
     * RefreshExpiresIn returns the lifetime of the token in seconds.
     */
    refreshExpiresIn: number;
    /**
     * RefreshToken returns the refresh token as a string.
     */
    refreshToken: string;
    /**
     * TokenType returns the type of token.
     */
    tokenType: string;
};

/** @internal */
export namespace V3TokenResponse$ {
    export const inboundSchema: z.ZodType<V3TokenResponse, z.ZodTypeDef, unknown> = z
        .object({
            access_token: z.string(),
            expires_in: z.number().int(),
            refresh_expires_in: z.number().int(),
            refresh_token: z.string(),
            token_type: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                access_token: "accessToken",
                expires_in: "expiresIn",
                refresh_expires_in: "refreshExpiresIn",
                refresh_token: "refreshToken",
                token_type: "tokenType",
            });
        });

    export type Outbound = {
        access_token: string;
        expires_in: number;
        refresh_expires_in: number;
        refresh_token: string;
        token_type: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, V3TokenResponse> = z
        .object({
            accessToken: z.string(),
            expiresIn: z.number().int(),
            refreshExpiresIn: z.number().int(),
            refreshToken: z.string(),
            tokenType: z.string(),
        })
        .transform((v) => {
            return remap$(v, {
                accessToken: "access_token",
                expiresIn: "expires_in",
                refreshExpiresIn: "refresh_expires_in",
                refreshToken: "refresh_token",
                tokenType: "token_type",
            });
        });
}
