/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type V3TokenResponse = {
    /**
     * AccessToken returns the access token as a string.
     */
    accessToken: string;
    /**
     * ExpiresIn returns the lifetime of the token in seconds.
     */
    expiresIn: number;
    /**
     * RefreshExpiresIn returns the lifetime of the token in seconds.
     */
    refreshExpiresIn: number;
    /**
     * RefreshToken returns the refresh token as a string.
     */
    refreshToken: string;
    /**
     * TokenType returns the type of token.
     */
    tokenType: string;
};

/** @internal */
export const V3TokenResponse$inboundSchema: z.ZodType<V3TokenResponse, z.ZodTypeDef, unknown> = z
    .object({
        access_token: z.string(),
        expires_in: z.number().int(),
        refresh_expires_in: z.number().int(),
        refresh_token: z.string(),
        token_type: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            access_token: "accessToken",
            expires_in: "expiresIn",
            refresh_expires_in: "refreshExpiresIn",
            refresh_token: "refreshToken",
            token_type: "tokenType",
        });
    });

/** @internal */
export type V3TokenResponse$Outbound = {
    access_token: string;
    expires_in: number;
    refresh_expires_in: number;
    refresh_token: string;
    token_type: string;
};

/** @internal */
export const V3TokenResponse$outboundSchema: z.ZodType<
    V3TokenResponse$Outbound,
    z.ZodTypeDef,
    V3TokenResponse
> = z
    .object({
        accessToken: z.string(),
        expiresIn: z.number().int(),
        refreshExpiresIn: z.number().int(),
        refreshToken: z.string(),
        tokenType: z.string(),
    })
    .transform((v) => {
        return remap$(v, {
            accessToken: "access_token",
            expiresIn: "expires_in",
            refreshExpiresIn: "refresh_expires_in",
            refreshToken: "refresh_token",
            tokenType: "token_type",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3TokenResponse$ {
    /** @deprecated use `V3TokenResponse$inboundSchema` instead. */
    export const inboundSchema = V3TokenResponse$inboundSchema;
    /** @deprecated use `V3TokenResponse$outboundSchema` instead. */
    export const outboundSchema = V3TokenResponse$outboundSchema;
    /** @deprecated use `V3TokenResponse$Outbound` instead. */
    export type Outbound = V3TokenResponse$Outbound;
}
