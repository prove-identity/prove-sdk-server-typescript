/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type V3VerifyResponse = {
  /**
   * AuthToken is a bearer token for use by the Prove Client SDK.
   */
  authToken?: string | undefined;
  /**
   * Correlation ID is the unique ID that Prove generates for the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow - it cannot be reused outside of a single flow.
   */
  correlationId: string;
  possessionResult: string;
  success: string;
  verifyResult: string;
};

/** @internal */
export const V3VerifyResponse$inboundSchema: z.ZodType<
  V3VerifyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  authToken: z.string().optional(),
  correlationId: z.string(),
  possessionResult: z.string(),
  success: z.string(),
  verifyResult: z.string(),
});

/** @internal */
export type V3VerifyResponse$Outbound = {
  authToken?: string | undefined;
  correlationId: string;
  possessionResult: string;
  success: string;
  verifyResult: string;
};

/** @internal */
export const V3VerifyResponse$outboundSchema: z.ZodType<
  V3VerifyResponse$Outbound,
  z.ZodTypeDef,
  V3VerifyResponse
> = z.object({
  authToken: z.string().optional(),
  correlationId: z.string(),
  possessionResult: z.string(),
  success: z.string(),
  verifyResult: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3VerifyResponse$ {
  /** @deprecated use `V3VerifyResponse$inboundSchema` instead. */
  export const inboundSchema = V3VerifyResponse$inboundSchema;
  /** @deprecated use `V3VerifyResponse$outboundSchema` instead. */
  export const outboundSchema = V3VerifyResponse$outboundSchema;
  /** @deprecated use `V3VerifyResponse$Outbound` instead. */
  export type Outbound = V3VerifyResponse$Outbound;
}

export function v3VerifyResponseToJSON(
  v3VerifyResponse: V3VerifyResponse,
): string {
  return JSON.stringify(
    V3VerifyResponse$outboundSchema.parse(v3VerifyResponse),
  );
}

export function v3VerifyResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3VerifyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3VerifyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3VerifyResponse' from JSON`,
  );
}
