/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AdditionalIdentity,
  AdditionalIdentity$inboundSchema,
  AdditionalIdentity$Outbound,
  AdditionalIdentity$outboundSchema,
} from "./additionalidentity.js";
import {
  Identity,
  Identity$inboundSchema,
  Identity$Outbound,
  Identity$outboundSchema,
} from "./identity.js";

export type V3VerifyResponseEvaluation = {};

export type V3VerifyResponse = {
  /**
   * (required IF verificationType=VerifiedUser)
   */
  additionalIdentities?: Array<AdditionalIdentity> | undefined;
  /**
   * A client-generated unique ID for a specific session. This can be used to identify specific requests. The format of this ID is defined by the client - Prove recommends using a GUID, but any format can be accepted. Do not include Personally Identifiable Information (PII) in this field.
   */
  clientRequestId?: string | undefined;
  /**
   * The unique ID that Prove generates for the flow. To continue the flow, the field will also be used for each of the subsequent API calls in the same flow - it cannot be reused outside of a single flow.
   */
  correlationId: string;
  /**
   * The evaluation result for the policy. This is an upcoming field but is not yet enabled.
   */
  evaluation?: { [k: string]: V3VerifyResponseEvaluation } | undefined;
  identity: Identity;
  /**
   * The mobile phone number. US phone numbers can be passed in with or without a leading `+1`. International phone numbers require a leading `+1`. Use the appropriate endpoint URL based on the region the number originates from. Acceptable characters are: alphanumeric with symbols '+'.
   */
  phoneNumber: string;
  /**
   * The result of verification
   */
  success: string;
};

/** @internal */
export const V3VerifyResponseEvaluation$inboundSchema: z.ZodType<
  V3VerifyResponseEvaluation,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type V3VerifyResponseEvaluation$Outbound = {};

/** @internal */
export const V3VerifyResponseEvaluation$outboundSchema: z.ZodType<
  V3VerifyResponseEvaluation$Outbound,
  z.ZodTypeDef,
  V3VerifyResponseEvaluation
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3VerifyResponseEvaluation$ {
  /** @deprecated use `V3VerifyResponseEvaluation$inboundSchema` instead. */
  export const inboundSchema = V3VerifyResponseEvaluation$inboundSchema;
  /** @deprecated use `V3VerifyResponseEvaluation$outboundSchema` instead. */
  export const outboundSchema = V3VerifyResponseEvaluation$outboundSchema;
  /** @deprecated use `V3VerifyResponseEvaluation$Outbound` instead. */
  export type Outbound = V3VerifyResponseEvaluation$Outbound;
}

export function v3VerifyResponseEvaluationToJSON(
  v3VerifyResponseEvaluation: V3VerifyResponseEvaluation,
): string {
  return JSON.stringify(
    V3VerifyResponseEvaluation$outboundSchema.parse(v3VerifyResponseEvaluation),
  );
}

export function v3VerifyResponseEvaluationFromJSON(
  jsonString: string,
): SafeParseResult<V3VerifyResponseEvaluation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3VerifyResponseEvaluation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3VerifyResponseEvaluation' from JSON`,
  );
}

/** @internal */
export const V3VerifyResponse$inboundSchema: z.ZodType<
  V3VerifyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  additionalIdentities: z.array(AdditionalIdentity$inboundSchema).optional(),
  clientRequestId: z.string().optional(),
  correlationId: z.string(),
  evaluation: z.record(z.lazy(() => V3VerifyResponseEvaluation$inboundSchema))
    .optional(),
  identity: Identity$inboundSchema,
  phoneNumber: z.string(),
  success: z.string(),
});

/** @internal */
export type V3VerifyResponse$Outbound = {
  additionalIdentities?: Array<AdditionalIdentity$Outbound> | undefined;
  clientRequestId?: string | undefined;
  correlationId: string;
  evaluation?: { [k: string]: V3VerifyResponseEvaluation$Outbound } | undefined;
  identity: Identity$Outbound;
  phoneNumber: string;
  success: string;
};

/** @internal */
export const V3VerifyResponse$outboundSchema: z.ZodType<
  V3VerifyResponse$Outbound,
  z.ZodTypeDef,
  V3VerifyResponse
> = z.object({
  additionalIdentities: z.array(AdditionalIdentity$outboundSchema).optional(),
  clientRequestId: z.string().optional(),
  correlationId: z.string(),
  evaluation: z.record(z.lazy(() => V3VerifyResponseEvaluation$outboundSchema))
    .optional(),
  identity: Identity$outboundSchema,
  phoneNumber: z.string(),
  success: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V3VerifyResponse$ {
  /** @deprecated use `V3VerifyResponse$inboundSchema` instead. */
  export const inboundSchema = V3VerifyResponse$inboundSchema;
  /** @deprecated use `V3VerifyResponse$outboundSchema` instead. */
  export const outboundSchema = V3VerifyResponse$outboundSchema;
  /** @deprecated use `V3VerifyResponse$Outbound` instead. */
  export type Outbound = V3VerifyResponse$Outbound;
}

export function v3VerifyResponseToJSON(
  v3VerifyResponse: V3VerifyResponse,
): string {
  return JSON.stringify(
    V3VerifyResponse$outboundSchema.parse(v3VerifyResponse),
  );
}

export function v3VerifyResponseFromJSON(
  jsonString: string,
): SafeParseResult<V3VerifyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V3VerifyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V3VerifyResponse' from JSON`,
  );
}
