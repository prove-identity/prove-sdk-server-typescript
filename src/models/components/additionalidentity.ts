/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AdditionalIdentity = {
  /**
   * Proveâ€™s tiered confidence metric, ranging from -1 to 3, that dynamically adapts to user behavior and various authentication keys. It allows for adaptive security policies, meaning you can require different levels of verification for different types of transactions.
   */
  assuranceLevel: string;
  /**
   * The first name of the individual.
   */
  firstName?: string | undefined;
  /**
   * The last name of the individual.
   */
  lastName?: string | undefined;
  /**
   * Codes explaining the verification outcome
   */
  reasons: Array<string>;
};

/** @internal */
export const AdditionalIdentity$inboundSchema: z.ZodType<
  AdditionalIdentity,
  z.ZodTypeDef,
  unknown
> = z.object({
  assuranceLevel: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  reasons: z.array(z.string()),
});

/** @internal */
export type AdditionalIdentity$Outbound = {
  assuranceLevel: string;
  firstName?: string | undefined;
  lastName?: string | undefined;
  reasons: Array<string>;
};

/** @internal */
export const AdditionalIdentity$outboundSchema: z.ZodType<
  AdditionalIdentity$Outbound,
  z.ZodTypeDef,
  AdditionalIdentity
> = z.object({
  assuranceLevel: z.string(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  reasons: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalIdentity$ {
  /** @deprecated use `AdditionalIdentity$inboundSchema` instead. */
  export const inboundSchema = AdditionalIdentity$inboundSchema;
  /** @deprecated use `AdditionalIdentity$outboundSchema` instead. */
  export const outboundSchema = AdditionalIdentity$outboundSchema;
  /** @deprecated use `AdditionalIdentity$Outbound` instead. */
  export type Outbound = AdditionalIdentity$Outbound;
}

export function additionalIdentityToJSON(
  additionalIdentity: AdditionalIdentity,
): string {
  return JSON.stringify(
    AdditionalIdentity$outboundSchema.parse(additionalIdentity),
  );
}

export function additionalIdentityFromJSON(
  jsonString: string,
): SafeParseResult<AdditionalIdentity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AdditionalIdentity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AdditionalIdentity' from JSON`,
  );
}
