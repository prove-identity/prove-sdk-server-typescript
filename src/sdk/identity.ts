/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { identityV3ActivateIdentity } from "../funcs/identityV3ActivateIdentity.js";
import { identityV3BatchEnrollIdentities } from "../funcs/identityV3BatchEnrollIdentities.js";
import { identityV3BatchGetIdentities } from "../funcs/identityV3BatchGetIdentities.js";
import { identityV3DeactivateIdentity } from "../funcs/identityV3DeactivateIdentity.js";
import { identityV3DisenrollIdentity } from "../funcs/identityV3DisenrollIdentity.js";
import { identityV3EnrollIdentity } from "../funcs/identityV3EnrollIdentity.js";
import { identityV3GetIdentitiesByPhoneNumber } from "../funcs/identityV3GetIdentitiesByPhoneNumber.js";
import { identityV3GetIdentity } from "../funcs/identityV3GetIdentity.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Identity extends ClientSDK {
  /**
   * Batch Get Identities
   *
   * @remarks
   * Return a list of all identities you have enrolled in Identity Manager.
   */
  async v3BatchGetIdentities(
    clientRequestId?: string | undefined,
    limit?: number | undefined,
    startKey?: string | undefined,
    showInactive?: boolean | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3BatchGetIdentitiesResponse> {
    return unwrapAsync(identityV3BatchGetIdentities(
      this,
      clientRequestId,
      limit,
      startKey,
      showInactive,
      options,
    ));
  }

  /**
   * Enroll Identity
   *
   * @remarks
   * Enrolls a single customer for monitoring using their phone number and unique identifier.
   */
  async v3EnrollIdentity(
    request?: components.V3EnrollIdentityRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3EnrollIdentityResponse> {
    return unwrapAsync(identityV3EnrollIdentity(
      this,
      request,
      options,
    ));
  }

  /**
   * Batch Enroll Identities
   *
   * @remarks
   * Enrolls multiple customers in a single request for efficient bulk operations (up to 100).
   */
  async v3BatchEnrollIdentities(
    request?: components.V3BatchEnrollIdentitiesRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3BatchEnrollIdentitiesResponse> {
    return unwrapAsync(identityV3BatchEnrollIdentities(
      this,
      request,
      options,
    ));
  }

  /**
   * Disenroll Identity
   *
   * @remarks
   * Disenrolls an identity from Identity Manager. If you wish to monitor in future, re-enrollment of that identity is required.
   */
  async v3DisenrollIdentity(
    identityId: string,
    clientRequestId?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3DisenrollIdentityResponse> {
    return unwrapAsync(identityV3DisenrollIdentity(
      this,
      identityId,
      clientRequestId,
      options,
    ));
  }

  /**
   * Get Identity
   *
   * @remarks
   * Return details of an identity given the identity ID.
   */
  async v3GetIdentity(
    identityId: string,
    clientRequestId?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3GetIdentityResponse> {
    return unwrapAsync(identityV3GetIdentity(
      this,
      identityId,
      clientRequestId,
      options,
    ));
  }

  /**
   * Activate Identity
   *
   * @remarks
   * Sets an identity as active for monitoring.
   */
  async v3ActivateIdentity(
    identityId: string,
    v3ActivateIdentityRequest?:
      | components.V3ActivateIdentityRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3ActivateIdentityResponse> {
    return unwrapAsync(identityV3ActivateIdentity(
      this,
      identityId,
      v3ActivateIdentityRequest,
      options,
    ));
  }

  /**
   * Deactivate Identity
   *
   * @remarks
   * Stops webhook notifications without disenrolling the identity.
   */
  async v3DeactivateIdentity(
    identityId: string,
    v3IdentityDeactivateRequest?:
      | components.V3IdentityDeactivateRequest
      | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3DeactivateIdentityResponse> {
    return unwrapAsync(identityV3DeactivateIdentity(
      this,
      identityId,
      v3IdentityDeactivateRequest,
      options,
    ));
  }

  /**
   * Get Identities By Phone Number
   *
   * @remarks
   * Return list of all identities you have enrolled that are associated with this phone number.
   */
  async v3GetIdentitiesByPhoneNumber(
    mobileNumber: string,
    clientRequestId?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3GetIdentitiesByPhoneNumberResponse> {
    return unwrapAsync(identityV3GetIdentitiesByPhoneNumber(
      this,
      mobileNumber,
      clientRequestId,
      options,
    ));
  }
}
