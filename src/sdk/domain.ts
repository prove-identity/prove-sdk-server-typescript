/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { domainV3DomainID } from "../funcs/domainV3DomainID.js";
import { domainV3DomainLink } from "../funcs/domainV3DomainLink.js";
import { domainV3DomainLinked } from "../funcs/domainV3DomainLinked.js";
import { domainV3DomainUnlink } from "../funcs/domainV3DomainUnlink.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Domain extends ClientSDK {
  /**
   * Get Domain Details
   *
   * @remarks
   * Returns the domain details.
   */
  async v3DomainID(
    request?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3DomainIDResponse> {
    return unwrapAsync(domainV3DomainID(
      this,
      request,
      options,
    ));
  }

  /**
   * # Create a request to connect the requested domain to the domain the request is made from.
   */
  async v3DomainLink(
    request?: components.V3DomainLinkRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3DomainLinkResponse> {
    return unwrapAsync(domainV3DomainLink(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the list of domains that are linked to this domain.
   *
   * @remarks
   * Returns the accepted and pending links for this domain.
   */
  async v3DomainLinked(
    options?: RequestOptions,
  ): Promise<operations.V3DomainLinkedResponse> {
    return unwrapAsync(domainV3DomainLinked(
      this,
      options,
    ));
  }

  /**
   * # Remove a domain link or request.
   */
  async v3DomainUnlink(
    request?: components.V3DomainUnlinkRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3DomainUnlinkResponse> {
    return unwrapAsync(domainV3DomainUnlink(
      this,
      request,
      options,
    ));
  }
}
