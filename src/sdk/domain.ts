/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { domainV3DomainConfirmLinkRequest } from "../funcs/domainV3DomainConfirmLinkRequest.js";
import { domainV3DomainIDRequest } from "../funcs/domainV3DomainIDRequest.js";
import { domainV3DomainLinkedRequest } from "../funcs/domainV3DomainLinkedRequest.js";
import { domainV3DomainLinkRequest } from "../funcs/domainV3DomainLinkRequest.js";
import { domainV3DomainUnlinkRequest } from "../funcs/domainV3DomainUnlinkRequest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Domain extends ClientSDK {
  /**
   * Confirm a domain link request
   *
   * @remarks
   * Confirms a given domain link request by validating the PCID.
   */
  async v3DomainConfirmLinkRequest(
    request?: components.V3DomainConfirmLinkRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3DomainConfirmLinkRequestResponse> {
    return unwrapAsync(domainV3DomainConfirmLinkRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Domain Details
   *
   * @remarks
   * Returns the domain details.
   */
  async v3DomainIDRequest(
    options?: RequestOptions,
  ): Promise<operations.V3DomainIDRequestResponse> {
    return unwrapAsync(domainV3DomainIDRequest(
      this,
      options,
    ));
  }

  /**
   * Request a domain link
   *
   * @remarks
   * Create a request to connect the requested domain to the domain the request is made from.
   */
  async v3DomainLinkRequest(
    request?: components.V3DomainLinkRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3DomainLinkRequestResponse> {
    return unwrapAsync(domainV3DomainLinkRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the list of domains that are linked to this domain.
   *
   * @remarks
   * Returns the accepted and pending links for this domain.
   */
  async v3DomainLinkedRequest(
    options?: RequestOptions,
  ): Promise<operations.V3DomainLinkedRequestResponse> {
    return unwrapAsync(domainV3DomainLinkedRequest(
      this,
      options,
    ));
  }

  /**
   * Remove a domain link or request
   *
   * @remarks
   * Remove a domain link or request between the requested domain and the domain the request is made from.
   */
  async v3DomainUnlinkRequest(
    request?: components.V3DomainUnlinkRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3DomainUnlinkRequestResponse> {
    return unwrapAsync(domainV3DomainUnlinkRequest(
      this,
      request,
      options,
    ));
  }
}
