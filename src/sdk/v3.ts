/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { v3V3ChallengeRequest } from "../funcs/v3V3ChallengeRequest.js";
import { v3V3CompleteRequest } from "../funcs/v3V3CompleteRequest.js";
import { v3V3MFABindRequest } from "../funcs/v3V3MFABindRequest.js";
import { v3V3MFARequest } from "../funcs/v3V3MFARequest.js";
import { v3V3MFAStatusRequest } from "../funcs/v3V3MFAStatusRequest.js";
import { v3V3StartRequest } from "../funcs/v3V3StartRequest.js";
import { v3V3TokenRequest } from "../funcs/v3V3TokenRequest.js";
import { v3V3ValidateRequest } from "../funcs/v3V3ValidateRequest.js";
import { v3V3VerifyRequest } from "../funcs/v3V3VerifyRequest.js";
import { v3V3VerifyStatusRequest } from "../funcs/v3V3VerifyStatusRequest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class V3 extends ClientSDK {
  /**
   * Request OAuth token.
   *
   * @remarks
   * Send this request to request the OAuth token.
   */
  async v3TokenRequest(
    request?: components.V3TokenRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3TokenRequestResponse> {
    return unwrapAsync(v3V3TokenRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Submit challenge.
   *
   * @remarks
   * Send this request to submit challenge information. Either a DOB or last 4 of SSN needs to be submitted if neither was submitted to the /start endpoint (challenge fields submitted to this endpoint will overwrite the /start endpoint fields submitted). It will return a correlation ID, user information, and the next step to call in the flow. This capability is only available in Pre-Fill®, it's not available in Prove Identity®. You'll notice that when using Prove Identity®, if /validate is successful, it will then return `v3-complete` as one of the keys in the `Next` field map instead of `v3-challenge`.
   */
  async v3ChallengeRequest(
    request?: components.V3ChallengeRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3ChallengeRequestResponse> {
    return unwrapAsync(v3V3ChallengeRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Complete flow.
   *
   * @remarks
   * Send this request to verify the user and complete the flow. It will return a correlation ID, user information, and the next step to call in the flow. There is a validation check that requires at least first + last name or SSN passed in, else an HTTP 400 is returned. Additionally, specific to the Pre-Fill® or Prove Identity® with KYC use case, you need to pass in first name, last name, DOB and SSN (or address) to ensure you receive back the KYC elements and correct CIP values.
   */
  async v3CompleteRequest(
    request?: components.V3CompleteRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3CompleteRequestResponse> {
    return unwrapAsync(v3V3CompleteRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Initiate possession check.
   *
   * @remarks
   * Send this request to initiate a possession check. It will return a correlation ID
   * and authToken for the client SDK.
   */
  async v3MFARequest(
    request?: components.V3MFARequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3MFARequestResponse> {
    return unwrapAsync(v3V3MFARequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Check status of MFA session.
   *
   * @remarks
   * Send this request to bind Prove Key to a phone nuymber of an MFA session and get the possession result.
   */
  async v3MFABindRequest(
    request?: components.V3MFABindRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3MFABindRequestResponse> {
    return unwrapAsync(v3V3MFABindRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Check status of MFA session.
   *
   * @remarks
   * Send this request to check the status of an MFA session and get the possession result.
   */
  async v3MFAStatusRequest(
    request?: components.V3MFAStatusRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3MFAStatusRequestResponse> {
    return unwrapAsync(v3V3MFAStatusRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Start flow.
   *
   * @remarks
   * Send this request to start a Prove flow. It will return a correlation ID and an authToken for the client SDK.
   */
  async v3StartRequest(
    request?: components.V3StartRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3StartRequestResponse> {
    return unwrapAsync(v3V3StartRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Validate phone number.
   *
   * @remarks
   * Send this request to check the phone number entered/discovered earlier in the flow is validated. It will return a correlation ID and the next step.
   */
  async v3ValidateRequest(
    request?: components.V3ValidateRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3ValidateRequestResponse> {
    return unwrapAsync(v3V3ValidateRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Initiate verified users session.
   *
   * @remarks
   * Send this request to initiate a Verified Users session. It will return a correlation ID, authToken for the client SDK, and the results of the possession and verify checks (usually pending from this API).
   */
  async v3VerifyRequest(
    request?: components.V3VerifyRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3VerifyRequestResponse> {
    return unwrapAsync(v3V3VerifyRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Perform checks for verified users session.
   *
   * @remarks
   * Send this request to perform the necessary checks for a Verified Users session. It will return the results of the possession and verify checks, as well as the overall success.
   */
  async v3VerifyStatusRequest(
    request?: components.V3VerifyStatusRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.V3VerifyStatusRequestResponse> {
    return unwrapAsync(v3V3VerifyStatusRequest(
      this,
      request,
      options,
    ));
  }
}
